#!/usr/bin/env bash
#
set -euo pipefail

# ERRORS
E_SUDO=2  # Root rights
E_COMMON=1  # Common error
E_NOLINK=3  # Download link is empty
E_BADSUM=4  # Bad md5 sum of downloaded file

# Variables
NEEDED_UTILS=(
  'wget'
  'curl'
)
CLONEZILLA_URL="http://free.nchc.org.tw/clonezilla-live/stable"
GRUB_40CONF="/etc/grub.d/40_custom"
MAIN_LOOP=0

function checkRoot {
  if [[ "$EUID" -ne 0 ]]; then
    printf "%b\n" "ERROR This script must be run as root. Use sudo." >&2
    exit "$E_SUDO"
  fi
}

function installUtils {
  for util in ${NEEDED_UTILS[*]}; do
    if ! command -v "$util" ; then
      { command pacman -Syq --noconfirm "$util"; } 2>&1
    fi
  done
}

function parseISOFileName {
  ISO_FILE="$( curl -s ${CLONEZILLA_URL}/MD5SUMS | grep "amd64.iso" |\
                           awk '{print $2}' )"
}

function downloadISO {
  if [[ -z "$ISO_FILE" ]]; then
    printf "%b\n" "ERROR Empty download link." >&2
    exit "$E_NOLINK"
    fi
  wget -qcO /opt/"${ISO_FILE}" "${CLONEZILLA_URL}/${ISO_FILE}"	
}

function checkISO_SUM {
  local MD5SUM
  local ISO_SUM
  MD5SUM="$( curl -s ${CLONEZILLA_URL}/MD5SUMS | grep "amd64.iso" |\
                            awk '{print $1}' )"
  ISO_SUM="$( md5sum /opt/"${ISO_FILE}" | awk '{print $1}' )"
  if [[ "${ISO_SUM}" -ne "${MD5SUM}" ]]; then
    printf "%b\n" "ERROR MD5SUM of $ISO_FILE is wrong." >&2
    exit "${E_BADSUM}"
  fi
}

function makeMenuEntry {
  if [[ ! -f /etc/grub.d/40_custom ]]; then
cat >/etc/grub.d/40_custom<<'EOF'
#!/bin/sh
exec tail -n +3 $0

EOF
  fi
	
cat >>/etc/grub.d/40_custom<<'EOF'
menuentry "CloneZilla ISO" {
  # The string between " and " below is the actual name of the ISO file you just downloaded
  # and copied to the /opt directory (where optional software resides)
  set ISOFile="/opt/CLONEZILLAISO"
  loopback loop ($root)$ISOFile
  linux (loop)/live/vmlinuz boot=live components config findiso=$ISOFile ip=frommedia toram=filesystem.squashfs union=overlay
  initrd (loop)/live/initrd.img
}
EOF

  sed -i "s/CLONEZILLAISO/${ISO_FILE}/" "${GRUB_40CONF}"
}

function updateGRUB {
  { command grub-mkconfig -o "${GRUB_40CONF}"; } 2>&1
}

function checkConfFiles {
  local ANSWER
  ANSWER=""

  printf "%s\n" "     What to do next?"
  printf "%s\n" " 1 - show ${GRUB_40CONF}"
  printf "%s\n" " 2 - edit ${GRUB_40CONF}"
  printf "%s\n" " 3 - exit"
  until [[ $ANSWER =~ ^[1-3]$ ]]; do
    read -rp "Choise [1-3]: " -e -i 3 ANSWER
  done

  case $ANSWER in
    1)
      command less "${GRUB_40CONF}"
      ;;
    2)
      command "${EDITOR:-vi}" "${GRUB_40CONF}"
      ;;
    3)
      printf "%s\n" "Exit."
      MAIN_LOOP=1
      ;;
  esac
}

function main {
  checkRoot
  installUtils
  parseISOFileName
  downloadISO
  checkISO_SUM
  makeMenuEntry
  updateGRUB
  until [[ "${MAIN_LOOP}" -eq 1 ]]; do
    checkConfFiles
  done
}

main "${@}" || exit "$E_COMMON"
exit 0
